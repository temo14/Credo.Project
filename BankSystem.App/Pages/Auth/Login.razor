@page "/login"
@using BankSystem.Shared.Enums;
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccountRepository accountsRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IJSRuntime JS

<h3>Login</h3>

<EditForm Model="userInfo" OnValidSubmit="Signin">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Email:</label>
        <div>
            <InputText class="form-control" @bind-Value="@userInfo.UserName" />
            <ValidationMessage For="@(() => userInfo.UserName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Password:</label>
        <div>
            <InputPassword class="form-control" @bind-Value="@userInfo.Password" />
            <ValidationMessage For="@(() => userInfo.Password)" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>

</EditForm>

@code {
    private LoginRequest userInfo = new LoginRequest();

    private async Task Signin()
    {
        string userToken = string.Empty;
        try
        {
            userToken = await accountsRepository.Login(userInfo);
        }
        catch (Exception)
        {
            await JS.InvokeAsync<string>("alert", "Username or Password is incorrect.");
        }

        if (!string.IsNullOrEmpty(userToken))
        {
            await loginService.Login(userToken);
            await Redirect();
        }
        //await InitializeUserAsync();
    }
    private async Task Redirect()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var role = authState.User.Claims.SingleOrDefault(x => x.Type == ClaimTypes.Role)!.Value;
        var Id = authState.User.Claims.SingleOrDefault(x => x.Type == "Id")!.Value;

        if (role == Roles.User.ToString())
        {
            navigationManager.NavigateTo($"user/{Id}");
        }
        else
        {
            navigationManager.NavigateTo($"operator");
        }
    }
}