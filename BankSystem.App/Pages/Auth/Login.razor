@page "/login"
@using BankSystem.Shared.Enums;
@using System.Security.Claims;

@inject IAccountRepository accountsRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService

<h3>Login</h3>

<EditForm Model="userInfo" OnValidSubmit="Signin">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Email:</label>
        <div>
            <InputText class="form-control" @bind-Value="@userInfo.UserName" />
            <ValidationMessage For="@(() => userInfo.UserName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Password:</label>
        <div>
            <InputPassword class="form-control" @bind-Value="@userInfo.Password" />
            <ValidationMessage For="@(() => userInfo.Password)" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>

</EditForm>

@code {
    private LoginRequest userInfo = new LoginRequest();
    private int userId;

    private async Task Signin()
    {
        var userToken = await accountsRepository.Login(userInfo);
        await loginService.Login(userToken);

        //await InitializeUserAsync();
    }

    //private async Task InitializeUserAsync()
    //{
    //    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //    var Id = authState.User.Claims.SingleOrDefault(x => x.Type == "Id");
    //    var role = authState.User.Claims.SingleOrDefault(x => x.Type == ClaimTypes.Role);

    //    userId = Convert.ToInt32(Id!.Value ?? throw new ArgumentNullException());

    //    if (role.ToString() == Roles.User.ToString())
    //    {
    //        navigationManager.NavigateTo($"user/{userId}");
    //    }
    //    else
    //    {
    //        navigationManager.NavigateTo($"operator");
    //    }
    //}

}