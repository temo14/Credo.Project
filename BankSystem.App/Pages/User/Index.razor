@page "/user/{Id:int}"

@inject IUserRepository _repository
@inject NavigationManager nav

@if (Accounts == null && ErrorMessage == null)
{
    <h3 class="text-danger">Loading ...</h3>
}
else if (ErrorMessage != null)
{
    <h3 class="text-danger">@ErrorMessage</h3>
}
else
{
    var accountsCount = Accounts!.Count();

    @if (accountsCount > 0)
    {
        <h3 class="mb-5">Accounts</h3>

        <table class="table">
            <thead>
                <tr>
                    <th>Amount</th>
                    <th>Iban</th>
                    <th>Currency</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var account in Accounts!)
            {
                <tr @onclick="@(() => nav.NavigateTo($"/account/{account.Id}"))">
                    <th>@account.Amount</th>
                    <th>@account.Iban</th>
                    <th>@account.Currency.ToString()</th>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <h3 class="text-danger">There are no Accounts to show</h3>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    public IEnumerable<AccountDto> Accounts { get; set; }

    public string ErrorMessage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Accounts = await _repository.GetAccounts(Id);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            throw;
        }
    }
}
