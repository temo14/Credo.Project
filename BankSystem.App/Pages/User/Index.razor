@page "/user/{Id:int}"

@inject IUserRepository _repository

@if (Accounts == null && ErrorMessage == null)
{
    <h3 class="text-danger">Loading ...</h3>
}
else if (ErrorMessage != null)
{
    <h3 class="text-danger">@ErrorMessage</h3>
}
else
{
    <h3 class="mb-5">Accoutns</h3>

    var accountsCount = Accounts!.Count();
    @if (accountsCount > 0)
    {
        @foreach (var account in Accounts!)
        {
            <div class="col-md-3 mb-2">
                <a href="/ProductDetails/@account.Id">
                    <div class="card-body">
                        <h5 class="card-title mb-3">
                            @account.Amount
                        </h5>
                        <p class="card-text">
                            <b>@account.Amount.ToString("C")</b>
                        </p>                    
                        <p class="card-text">
                            <b>@account.Iban</b>
                        </p>                        
                        <p class="card-text">
                            <b>@account.Currency.ToString()</b>
                        </p>
                    </div>
                </a>
            </div>
        }
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    public IEnumerable<AccountDto> Accounts { get; set; }

    public string ErrorMessage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Accounts = await _repository.GetAccounts(Id);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            throw;
        }
    }
}
