@page "/register/user"
@using BankSystem.Shared.Enums;

@inject IAccountRepository accountsRepository
@inject NavigationManager navigationManager
@inject IJSRuntime JS

<h3>Add User</h3>

<EditForm Model="user" OnValidSubmit="CreateUser">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>FirstName:</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.FirstName" />
            <ValidationMessage For="@(() => user.FirstName)" />
        </div>
    </div>  
    
    <div class="form-group">
        <label>LastName:</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.LastName" />
            <ValidationMessage For="@(() => user.LastName)" />
        </div>
    </div>
    
    <div class="form-group">
        <label>Username:</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.Username" />
            <ValidationMessage For="@(() => user.Username)" />
        </div>
    </div>   
    
    <div class="form-group">
        <label>Password:</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.Password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div> 
    
    <div class="form-group">
        <label>IdNumber:</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.IdNumber" />
            <ValidationMessage For="@(() => user.IdNumber)" />
        </div>
    </div>  
    
    <div class="form-group">
        <label>Roles:</label>
        <div>
            <InputSelect class="form-control" @bind-Value="@user.Roles">
                <option value="" selected disabled hidden>Choose here</option>
                 @foreach (var role in Enum.GetValues(typeof(Roles)))
                 {
                     <option value="@(role)">@role</option>
                 }
            </InputSelect>

            <ValidationMessage For="@(() => user.Roles)" />
        </div>
    </div> 
    
    <div class="form-group">
        <label>BirthDate:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@user.BirthDate" />
            <ValidationMessage For="@(() => user.BirthDate)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Add User</button>

</EditForm>

@code {
    private UserDto user = new UserDto();
    public string ErrorMessage { get; set; }

    private async Task CreateUser()
    {
        try
        {
            await accountsRepository.AddUser(user);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            await JS.InvokeAsync<string>("alert", $"Invalid Request, {ErrorMessage}");
        }
        if (ErrorMessage == null)
        {
            navigationManager.NavigateTo("operator");
        }
    }
}