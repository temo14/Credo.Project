@page "/register/account"
@using BankSystem.Shared.Enums;

@inject IAccountRepository accountsRepository
@inject NavigationManager navigationManager
@inject IJSRuntime JS

<h3>Add Account</h3>

<EditForm Model="account" OnValidSubmit="CreateUser">
    <DataAnnotationsValidator />
    
    <div class="form-group">
        <label>UserId:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@account.UserId" />
            <ValidationMessage For="@(() => account.UserId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Amount:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@account.Amount" />
            <ValidationMessage For="@(() => account.Amount)" />
        </div>
    </div>  
    
    <div class="form-group">
        <label>Iban:</label>
        <div>
            <InputText class="form-control" @bind-Value="@account.Iban" />
            <ValidationMessage For="@(() => account.Iban)" />
        </div>
    </div>   
    
    <div class="form-group">
        <label>Currency:</label>
        <div>
            <InputSelect class="form-control" @bind-Value="@account.Currency">
            <option value="" selected disabled hidden>Choose here</option>
                @foreach (var currency in Enum.GetValues(typeof(Currency)))
                 {
                     <option value="@(currency)">@currency</option>
                 }
            </InputSelect>
            <ValidationMessage For="@(() => account.Currency)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Add User</button>

</EditForm>

@code {
    private AccountDto account = new AccountDto();
    public string ErrorMessage { get; set; }

    private async Task CreateUser()
    {
        try
        {
            await accountsRepository.AddAccount(account);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            await JS.InvokeAsync<string>("alert", $"Invalid Request, {ErrorMessage}");
        }
        if (ErrorMessage == null)
        {
            navigationManager.NavigateTo("operator");
        }
    }
}