@page "/register/card"

@inject IAccountService accountsRepository
@inject NavigationManager navigationManager
@inject IJSRuntime JS

<h3>Add Card</h3>

<EditForm Model="creditCard" OnValidSubmit="CreateCard">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>UserId:</label>
        <div>
            <InputNumber  class="form-control" @bind-Value="@creditCard.UserId" />
            <ValidationMessage For="@(() => creditCard.UserId)" />
        </div>
    </div>

    <div class="form-group">
        <label>AccountId:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@creditCard.AccountId" />
            <ValidationMessage For="@(() => creditCard.AccountId)" />
        </div>
    </div>

    <div class="form-group">
        <label>CardNumber:</label>
        <div>
            <InputText class="form-control" @bind-Value="@creditCard.CardNumber" />
            <ValidationMessage For="@(() => creditCard.CardNumber)" />
        </div>
    </div>

    <div class="form-group">
        <label>Cvv:</label>
        <div>
            <InputText class="form-control" @bind-Value="@creditCard.Cvv" />
            <ValidationMessage For="@(() => creditCard.Cvv)" />
        </div>
    </div>

    <div class="form-group">
        <label>Pin:</label>
        <div>
            <InputText class="form-control" @bind-Value="@creditCard.Pin" />
            <ValidationMessage For="@(() => creditCard.Pin)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Add CreateCard</button>

</EditForm>

@code {
    private CreditCardDto creditCard = new CreditCardDto();
    private string ErrorMessage;
    private async Task CreateCard()
    {
        try
        {
            await accountsRepository.AddCard(creditCard);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            await JS.InvokeAsync<string>("alert", $"Invalid Request, {ErrorMessage}");
        }
        if (ErrorMessage == null)
        {
            navigationManager.NavigateTo("operator");
        }
    }
}