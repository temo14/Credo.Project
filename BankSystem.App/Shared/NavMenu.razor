@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BankSystem.App</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <AuthorizeView Roles="Operator">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="operator">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Operator
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>   
        <AuthorizeView Roles="User">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" @onclick="InitializeUserAsync">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> User
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    public override Task SetParametersAsync(ParameterView parameters)
    {
        return base.SetParametersAsync(parameters);
    }
    private async Task InitializeUserAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var Id = authState.User.Claims.SingleOrDefault(x => x.Type == "Id");

        var userId = Convert.ToInt32(Id!.Value ?? throw new ArgumentNullException());

        navigationManager.NavigateTo($"user/{userId}");
    }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
